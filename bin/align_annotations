#!/usr/bin/env ruby
require 'text_alignment'
require 'json'
require 'pp'

def read_annotations(filename)
	case File.extname(filename)
	when '.json'
		JSON.parse File.read(filename), :symbolize_names => true
	when '.txt'
		{text: File.read(filename)}
	else
		raise "unknown file type: #{filename}"
	end
end

def read_text(filename)
	case File.extname(filename)
	when '.json'
		json = JSON.parse File.read(filename), :symbolize_names => true
		json[:text]
	when '.txt'
		File.read(filename)
	else
		raise "unknown file type: #{filename}"
	end
end

unless ARGV.length == 2
	warn "align_annotations target_annotations(.json|.txt) reference_annotations(.json|.txt)"
	exit
end

source_annotations = read_annotations(ARGV[0])
target_text = read_text(ARGV[1])

lost_annotations = []
target_annotations = if source_annotations.class == Array
	result = {text: target_text}

	num_denotations_source = 0
	num_relations_source = 0
	num_attributes_source = 0
	num_modifications_source = 0

	idnum_denotations = 0
	idnum_relations = 0
	idnum_attributes = 0
	idnum_modifications = 0

	source_annotations.each do |annotations|
		num_denotations_source += annotations[:denotations].nil? ? 0 : annotations[:denotations].length
		num_relations_source += annotations[:relations].nil? ? 0 : annotations[:relations].length
		num_attributes_source += annotations[:attributes].nil? ? 0 : annotations[:attributes].length
		num_modifications_source += annotations[:modifications].nil? ? 0 : annotations[:modifications].length

		alignment = TextAlignment::TextAlignment.new(annotations[:text], target_text)

		# alignment.block_alignments.each do |a|
			# p a[:source]
			# p a[:target]
			# p a[:alignment] if a[:alignment].nil? || a[:alignment] == :empty
			# puts "--"
			# puts annotations[:text][a[:source][:begin] ... a[:source][:end]]
			# puts "--"
			# puts target_text[a[:target][:begin] ... a[:target][:end]]
			# puts "======"
		# end

		if annotations.has_key?(:denotations) && !annotations[:denotations].empty?

			ididx = {}
			denotations = alignment.transform_hdenotations(annotations[:denotations])
			denotations.each do |d|
				reid = 'T' + (idnum_denotations += 1).to_s
				ididx[d[:id]] = reid
				d[:id] = reid
			end
			result[:denotations] = [] unless result.has_key? :denotations
			result[:denotations] += denotations

			if annotations.has_key?(:relations) && !annotations[:relations].empty?
				result[:relations] = [] unless result.has_key? :relations
				annotations[:relations].each do |r|
					reid = 'R' + (idnum_relations += 1).to_s
					ididx[r[:id]] = reid
					result[:relations] << r.dup.merge({id:reid, subj:ididx[r[:subj]], obj:ididx[r[:obj]]})
				end
			end

			if annotations.has_key?(:attributes) && !annotations[:attributes].empty?
				result[:attributes] = [] unless result.has_key? :attributes
				annotations[:attributes].each do |a|
					reid = 'A' + (idnum_attributes += 1).to_s
					ididx[a[:id]] = reid
					result[:attributes] << a.dup.merge({id:reid, subj:ididx[a[:subj]]})
				end
			end

			if annotations.has_key?(:modifications) && !annotations[:modifications].empty?
				result[:modifications] = [] unless result.has_key? :modifications
				annotations[:modifications].each do |m|
					reid = 'M' + (idnum_modifications += 1).to_s
					ididx[m[:id]] = reid
					result[:modifications] << m.dup.merge({id:reid, obj:ididx[m[:obj]]})
				end
			end
		end
	end
	result
else
	num_denotations_source = source_annotations[:denotations].nil? ? 0 : source_annotations[:denotations].length
	num_relations_source = source_annotations[:relations].nil? ? 0 : source_annotations[:relations].length
	num_attributes_source = source_annotations[:attributes].nil? ? 0 : source_annotations[:attributes].length
	num_modifications_source = source_annotations[:modifications].nil? ? 0 : source_annotations[:modifications].length

	alignment = TextAlignment::TextAlignment.new(source_annotations[:text], target_text)

	# alignment.block_alignments.each do |a|
	# 	if a[:alignment].nil? || a[:alignment] == :empty
	# 		# p [a[:source], a[:target]]
	# 		# p a[:alignment]
	# 	else
	# 		p [a[:source], a[:target]]
	# 		p a[:alignment].similarity
	# 		puts "--"
	# 		puts source_annotations[:text][a[:source][:begin] ... a[:source][:end]]
	# 		puts "--"
	# 		puts target_text[a[:target][:begin] ... a[:target][:end]]
	# 		puts "======"
	# 	end
	# end
	# exit

	denotations = alignment.transform_hdenotations(source_annotations[:denotations])
	lost_annotations += alignment.lost_annotations if alignment.lost_annotations

	source_annotations.merge({text:target_text, denotations:denotations})
end

warn "[source]"
warn "denotations:\t#{num_denotations_source}"
warn "relations:\t#{num_relations_source}"
warn "attributes:\t#{num_attributes_source}"
warn "modifications:\t#{num_modifications_source}"

warn "\n[target]"
warn "denotations:\t#{target_annotations[:denotations].nil? ? 0 : target_annotations[:denotations].length}"
warn "relations:\t#{target_annotations[:relations].nil? ? 0 : target_annotations[:relations].length}"
warn "attributes:\t#{target_annotations[:attributes].nil? ? 0 : target_annotations[:attributes].length}"
warn "modifications:\t#{target_annotations[:modifications].nil? ? 0 : target_annotations[:modifications].length}"

if lost_annotations
	warn "\n[lost annotations]"
	warn "#{lost_annotations.length}"
end

puts target_annotations.to_json

# denotations = anns1[:denotations]

# puts "[Alignment1]====="
# align = TextAlignment::TextAlignment.new(str1, str2, TextAlignment::MAPPINGS)

# align.alignment.each do |a|
# 	p [a[:target][:begin], a[:target][:end], a[:source][:begin], a[:source][:end]]
# end

# puts TextAlignment::sdiff2cdiff(align.sdiff)
# puts
# puts "[Similarity]\n#{align.similarity}"
# puts
# puts '[Denotations original]'
# pp denotations
# puts
# puts '[Denotations transformed]'
# new_denotations = align.transform_hdenotations(denotations)
# pp new_denotations
# puts
# puts "[Alignment2 (downcased)]====="
# align = TextAlignment::TextAlignment.new(str1.downcase, str2.downcase, TextAlignment::MAPPINGS)
# puts TextAlignment::sdiff2cdiff(align.sdiff)
# puts
# puts "[Similarity]\n#{align.similarity}"
# puts
# puts '[Denotations original]'
# pp denotations
# puts
# puts '[Denotations transformed]'
# new_denotations = align.transform_hdenotations(denotations)
# pp new_denotations
# puts
# puts '[Annotations transformed]'
# anns2[:denotations] = new_denotations
# puts anns2.to_json

# p align.common_elements
# puts "---------------"
# p align.mapped_elements
