#!/usr/bin/env ruby
require 'text_alignment'
require 'json'
require 'pp'

def read_annotations(filename)
	case File.extname(filename)
	when '.json'
		JSON.parse File.read(filename), :symbolize_names => true
	when '.txt'
		{text: File.read(filename)}
	else
		raise "unknown file type: #{filename}"
	end
end

def read_text(filename)
	case File.extname(filename)
	when '.json'
		json = JSON.parse File.read(filename), :symbolize_names => true
		json[:text]
	when '.txt'
		File.read(filename)
	else
		raise "unknown file type: #{filename}"
	end
end

def align_denotations(denotations, source_text, alignment, debug = false)
	alignment.align(source_text, denotations)
	new_denotations = alignment.transform_hdenotations(denotations)

	if debug
		warn "[block alignment]"
		warn alignment.alignment_show
		warn "-----"
	end

	lost_annotations = alignment.lost_annotations
	unless lost_annotations.nil? || lost_annotations.empty?
		warn "\n[lost annotations] #{lost_annotations.length}"
		lost_annotations.each do |a|
			warn "#{a}"
		end
		warn "====="
	end
	warn

	# return target annotations
	new_denotations
end

def align_mannotations(source_annotations, reference_text, alignment, debug = false)
	target_annotations = {text:reference_text}

	idnum_denotations = 0
	idnum_relations = 0
	idnum_attributes = 0
	idnum_modifications = 0

	source_annotations.each_with_index do |annotations, i|
		if annotations.has_key?(:denotations) && !annotations[:denotations].empty?
			ididx = {}
			warn "[#{i}]-=-=-=-=-"
			denotations = align_denotations(annotations[:denotations], annotations[:text], alignment, debug)

			denotations.each do |d|
				reid = 'T' + (idnum_denotations += 1).to_s
				ididx[d[:id]] = reid
				d[:id] = reid
			end
			target_annotations[:denotations] = [] unless target_annotations.has_key? :denotations
			target_annotations[:denotations] += denotations

			if annotations.has_key?(:relations) && !annotations[:relations].empty?
				target_annotations[:relations] = [] unless target_annotations.has_key? :relations
				annotations[:relations].each do |r|
					reid = 'R' + (idnum_relations += 1).to_s
					ididx[r[:id]] = reid
					sid = ididx[r[:subj]]
					oid = ididx[r[:obj]]
					target_annotations[:relations] << r.dup.merge({id:reid, subj:sid, obj:oid}) unless sid.nil? || oid.nil?
				end
			end

			if annotations.has_key?(:attributes) && !annotations[:attributes].empty?
				target_annotations[:attributes] = [] unless target_annotations.has_key? :attributes
				annotations[:attributes].each do |a|
					reid = 'A' + (idnum_attributes += 1).to_s
					ididx[a[:id]] = reid
					sid = ididx[a[:subj]]
					target_annotations[:attributes] << a.dup.merge({id:reid, subj:sid}) unless sid.nil?
				end
			end

			if annotations.has_key?(:modifications) && !annotations[:modifications].empty?
				target_annotations[:modifications] = [] unless target_annotations.has_key? :modifications
				annotations[:modifications].each do |m|
					reid = 'M' + (idnum_modifications += 1).to_s
					ididx[m[:id]] = reid
					oid = ididx[m[:obj]]
					target_annotations[:modifications] << m.dup.merge({id:reid, obj:oid}) unless oid.nil?
				end
			end
		end
	end
	target_annotations
end


unless ARGV.length == 2
	warn "align_annotations target_annotations(.json|.txt) reference_annotations(.json|.txt)"
	exit
end

source_annotations = read_annotations(ARGV[0])
reference_text = read_text(ARGV[1])

alignment = TextAlignment::TextAlignment.new(reference_text, true)

target_annotations = if source_annotations.class == Array
	# align_mannotations(source_annotations, reference_text, alignment, true)
	align_mannotations(source_annotations, reference_text, alignment, false)
else
	# denotations = align_denotations(source_annotations[:denotations], source_annotations[:text], alignment)
	denotations = align_denotations(source_annotations[:denotations], source_annotations[:text], alignment, false)
	source_annotations.merge({text:reference_text, denotations:denotations})
end

# pp alignment.block_alignment
# puts target_annotations.to_json
